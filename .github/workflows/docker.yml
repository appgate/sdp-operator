---
name: Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  get-specs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install wget tool
        run: |
          sudo apt-get update
          sudo apt-get install wget
      - name: Get openspec API
        run: ./bin/get-open-spec.sh
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: openspecs
          path: /tmp/openspec-*.zip

  build:
    needs: get-specs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: openspecs
          path: /tmp
      - name: install unzip
        run: |
          sudo apt-get update
          sudo apt-get install unzip
      - name: Get openspec API
        run: ./bin/unzip-open-spec.sh
        shell: bash
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-build.txt
      - name: Lint with mypy
        run: |
          MYPYPATH=mypy-stubs mypy appgate
      - name: Test with pytest
        run: |
          PYTHONPATH=. pytest tests
      - name: Check formatting with black
        run: |
          black --check --diff appgate tests

  helm:
    runs-on: ubuntu-latest
    env:
      HELM_EXPERIMENTAL_OCI: 1
    steps:
      - uses: actions/checkout@v2
      - name: Read operator chart version
        run: |
          echo "chart_version=$(grep version: k8s/chart/Chart.yaml | awk '/version:/{print $NF}')" >> $GITHUB_ENV
      - uses: azure/setup-helm@v1
        with:
          version: 3.7.2
      - name: Login to GitHub Container Registry
        run: helm registry login ghcr.io/${{ github.repository }} --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }}
      - name: Lint chart
        run: helm lint k8s/chart
      - name: Package chart
        run: helm package k8s/chart
      - name: Push chart
        if: ${{ github.ref == 'refs/heads/main' }}
        run: helm push sdp-operator-${{ env.chart_version }}.tgz oci://ghcr.io/appgate/charts

  images:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ["v12", "v13", "v14", "v15", "v16", "v17"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: openspecs
          path: /tmp
      - name: install unzip
        run: |
          sudo apt-get update
          sudo apt-get install unzip
      - name: Get openspec API
        run: ./bin/unzip-open-spec.sh
        shell: bash
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image
        uses: docker/build-push-action@v2
        with:
          build-args: |
            SPEC_VERSION=${{ matrix.version }}
          context: .
          file: docker/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ github.repository }}/sdp-operator:${{ matrix.version }}

  crd:
    needs: build
    runs-on: ubuntu-latest
    env:
      HELM_EXPERIMENTAL_OCI: 1
    strategy:
      matrix:
        version: ["v12", "v13", "v14", "v15", "v16", "v17"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: openspecs
          path: /tmp
      - name: Install unzip
        run: |
          sudo apt-get update
          sudo apt-get install unzip
      - name: Get OpenAPI specs
        run: ./bin/unzip-open-spec.sh
        shell: bash
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-build.txt
      - name: Dump CRDs
        run: |
          python3 -m appgate --spec-directory api_specs/${{ matrix.version }} dump-crd --version ${{ matrix.version }}
      - name: Move CRDs to chart templates
        run: |
          mkdir k8s/crd/templates
          mv *-crd.yml k8s/crd/templates/
      - name: Read operator chart version
        run: |
          echo "chart_version=$(grep version: k8s/chart/Chart.yaml | awk '/version:/{print $NF}')" >> $GITHUB_ENV
      - name: Set .name
        uses: mikefarah/yq@master
        with:
          cmd: yq eval -i '.name = "sdp-operator-crd-${{ matrix.version }}"' k8s/crd/Chart.yaml
      - name: set .description
        uses: mikefarah/yq@master
        with:
          cmd: yq eval -i '.description = "A Helm chart for SDP Operator CRD ${{ matrix.version }}"' k8s/crd/Chart.yaml
      - name: Set .version
        uses: mikefarah/yq@master
        with:
          cmd: yq eval -i '.version = "${{ env.chart_version }}"' k8s/crd/Chart.yaml
      - name: Set .appVersion
        uses: mikefarah/yq@master
        with:
          cmd: yq eval -i '.appVersion = "${{ matrix.version }}"' k8s/crd/Chart.yaml
      - uses: azure/setup-helm@v1
        with:
          version: 3.7.2
      - name: Login to GitHub Container Registry
        run: helm registry login ghcr.io/${{ github.repository }} --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }}
      - name: Lint chart
        run: helm lint k8s/crd
      - name: Package chart
        run: helm package k8s/crd
      - name: Push chart
        if: ${{ github.ref == 'refs/heads/main' }}
        run: helm push sdp-operator-crd-${{ matrix.version }}-${{ env.chart_version }}.tgz oci://ghcr.io/appgate/charts
